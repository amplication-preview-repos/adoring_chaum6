datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Project {
  assets    Asset[]
  createdAt DateTime           @default(now())
  id        String             @id @default(cuid())
  name      String?
  status    EnumProjectStatus?
  tasks     Task[]
  updatedAt DateTime           @updatedAt
  user      User?              @relation(fields: [userId], references: [id])
  userId    String?
}

model Composition {
  audioFiles  AudioFile[]
  createdAt   DateTime    @default(now())
  description String?
  id          String      @id @default(cuid())
  title       String?
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
}

model Settings {
  configKey   String?
  configValue Json?
  createdAt   DateTime @default(now())
  id          String   @id @default(cuid())
  updatedAt   DateTime @updatedAt
}

model AudioFile {
  composition   Composition? @relation(fields: [compositionId], references: [id])
  compositionId String?
  createdAt     DateTime     @default(now())
  fileName      String?
  filePath      String?
  id            String       @id @default(cuid())
  updatedAt     DateTime     @updatedAt
}

model AudioEffect {
  createdAt  DateTime @default(now())
  effectName String?
  id         String   @id @default(cuid())
  settings   Json?
  updatedAt  DateTime @updatedAt
}

model User {
  compositions Composition[]
  createdAt    DateTime      @default(now())
  email        String?       @unique
  firstName    String?
  id           String        @id @default(cuid())
  lastName     String?
  password     String
  projects     Project[]
  roles        Json
  tasks        Task[]
  updatedAt    DateTime      @updatedAt
  username     String        @unique
}

model Asset {
  createdAt DateTime            @default(now())
  id        String              @id @default(cuid())
  name      String?
  project   Project?            @relation(fields: [projectId], references: [id])
  projectId String?
  typeField EnumAssetTypeField?
  updatedAt DateTime            @updatedAt
  url       String?
}

model Task {
  createdAt   DateTime        @default(now())
  description String?
  id          String          @id @default(cuid())
  project     Project?        @relation(fields: [projectId], references: [id])
  projectId   String?
  status      EnumTaskStatus?
  title       String?
  updatedAt   DateTime        @updatedAt
  user        User?           @relation(fields: [userId], references: [id])
  userId      String?
}

model AppUser {
  audioProjects AudioProject[]
  createdAt     DateTime         @default(now())
  email         String?
  id            String           @id @default(cuid())
  password      String?
  role          EnumAppUserRole?
  updatedAt     DateTime         @updatedAt
  username      String?
}

model AudioProject {
  appUser     AppUser?  @relation(fields: [appUserId], references: [id])
  appUserId   String?
  createdAt   DateTime  @default(now())
  description String?
  endDate     DateTime?
  id          String    @id @default(cuid())
  startDate   DateTime?
  title       String?
  updatedAt   DateTime  @updatedAt
}

enum EnumProjectStatus {
  Option1
}

enum EnumAssetTypeField {
  Option1
}

enum EnumTaskStatus {
  Option1
}

enum EnumAppUserRole {
  Option1
}
