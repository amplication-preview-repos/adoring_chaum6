/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Composition as PrismaComposition,
  AudioFile as PrismaAudioFile,
  User as PrismaUser,
} from "@prisma/client";

export class CompositionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompositionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.composition.count(args);
  }

  async compositions(
    args: Prisma.CompositionFindManyArgs
  ): Promise<PrismaComposition[]> {
    return this.prisma.composition.findMany(args);
  }
  async composition(
    args: Prisma.CompositionFindUniqueArgs
  ): Promise<PrismaComposition | null> {
    return this.prisma.composition.findUnique(args);
  }
  async createComposition(
    args: Prisma.CompositionCreateArgs
  ): Promise<PrismaComposition> {
    return this.prisma.composition.create(args);
  }
  async updateComposition(
    args: Prisma.CompositionUpdateArgs
  ): Promise<PrismaComposition> {
    return this.prisma.composition.update(args);
  }
  async deleteComposition(
    args: Prisma.CompositionDeleteArgs
  ): Promise<PrismaComposition> {
    return this.prisma.composition.delete(args);
  }

  async findAudioFiles(
    parentId: string,
    args: Prisma.AudioFileFindManyArgs
  ): Promise<PrismaAudioFile[]> {
    return this.prisma.composition
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .audioFiles(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.composition
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
