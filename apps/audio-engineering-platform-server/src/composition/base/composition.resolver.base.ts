/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Composition } from "./Composition";
import { CompositionCountArgs } from "./CompositionCountArgs";
import { CompositionFindManyArgs } from "./CompositionFindManyArgs";
import { CompositionFindUniqueArgs } from "./CompositionFindUniqueArgs";
import { CreateCompositionArgs } from "./CreateCompositionArgs";
import { UpdateCompositionArgs } from "./UpdateCompositionArgs";
import { DeleteCompositionArgs } from "./DeleteCompositionArgs";
import { AudioFileFindManyArgs } from "../../audioFile/base/AudioFileFindManyArgs";
import { AudioFile } from "../../audioFile/base/AudioFile";
import { User } from "../../user/base/User";
import { CompositionService } from "../composition.service";
@graphql.Resolver(() => Composition)
export class CompositionResolverBase {
  constructor(protected readonly service: CompositionService) {}

  async _compositionsMeta(
    @graphql.Args() args: CompositionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Composition])
  async compositions(
    @graphql.Args() args: CompositionFindManyArgs
  ): Promise<Composition[]> {
    return this.service.compositions(args);
  }

  @graphql.Query(() => Composition, { nullable: true })
  async composition(
    @graphql.Args() args: CompositionFindUniqueArgs
  ): Promise<Composition | null> {
    const result = await this.service.composition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Composition)
  async createComposition(
    @graphql.Args() args: CreateCompositionArgs
  ): Promise<Composition> {
    return await this.service.createComposition({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Composition)
  async updateComposition(
    @graphql.Args() args: UpdateCompositionArgs
  ): Promise<Composition | null> {
    try {
      return await this.service.updateComposition({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Composition)
  async deleteComposition(
    @graphql.Args() args: DeleteCompositionArgs
  ): Promise<Composition | null> {
    try {
      return await this.service.deleteComposition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AudioFile], { name: "audioFiles" })
  async findAudioFiles(
    @graphql.Parent() parent: Composition,
    @graphql.Args() args: AudioFileFindManyArgs
  ): Promise<AudioFile[]> {
    const results = await this.service.findAudioFiles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Composition): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
