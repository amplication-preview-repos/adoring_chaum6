/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AudioProjectService } from "../audioProject.service";
import { AudioProjectCreateInput } from "./AudioProjectCreateInput";
import { AudioProject } from "./AudioProject";
import { AudioProjectFindManyArgs } from "./AudioProjectFindManyArgs";
import { AudioProjectWhereUniqueInput } from "./AudioProjectWhereUniqueInput";
import { AudioProjectUpdateInput } from "./AudioProjectUpdateInput";

export class AudioProjectControllerBase {
  constructor(protected readonly service: AudioProjectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AudioProject })
  async createAudioProject(
    @common.Body() data: AudioProjectCreateInput
  ): Promise<AudioProject> {
    return await this.service.createAudioProject({
      data: {
        ...data,

        appUser: data.appUser
          ? {
              connect: data.appUser,
            }
          : undefined,
      },
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        endDate: true,
        id: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AudioProject] })
  @ApiNestedQuery(AudioProjectFindManyArgs)
  async audioProjects(@common.Req() request: Request): Promise<AudioProject[]> {
    const args = plainToClass(AudioProjectFindManyArgs, request.query);
    return this.service.audioProjects({
      ...args,
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        endDate: true,
        id: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AudioProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async audioProject(
    @common.Param() params: AudioProjectWhereUniqueInput
  ): Promise<AudioProject | null> {
    const result = await this.service.audioProject({
      where: params,
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        endDate: true,
        id: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AudioProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAudioProject(
    @common.Param() params: AudioProjectWhereUniqueInput,
    @common.Body() data: AudioProjectUpdateInput
  ): Promise<AudioProject | null> {
    try {
      return await this.service.updateAudioProject({
        where: params,
        data: {
          ...data,

          appUser: data.appUser
            ? {
                connect: data.appUser,
              }
            : undefined,
        },
        select: {
          appUser: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          endDate: true,
          id: true,
          startDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AudioProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAudioProject(
    @common.Param() params: AudioProjectWhereUniqueInput
  ): Promise<AudioProject | null> {
    try {
      return await this.service.deleteAudioProject({
        where: params,
        select: {
          appUser: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          endDate: true,
          id: true,
          startDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
