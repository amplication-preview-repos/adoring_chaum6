/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AudioProject } from "./AudioProject";
import { AudioProjectCountArgs } from "./AudioProjectCountArgs";
import { AudioProjectFindManyArgs } from "./AudioProjectFindManyArgs";
import { AudioProjectFindUniqueArgs } from "./AudioProjectFindUniqueArgs";
import { CreateAudioProjectArgs } from "./CreateAudioProjectArgs";
import { UpdateAudioProjectArgs } from "./UpdateAudioProjectArgs";
import { DeleteAudioProjectArgs } from "./DeleteAudioProjectArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { AudioProjectService } from "../audioProject.service";
@graphql.Resolver(() => AudioProject)
export class AudioProjectResolverBase {
  constructor(protected readonly service: AudioProjectService) {}

  async _audioProjectsMeta(
    @graphql.Args() args: AudioProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AudioProject])
  async audioProjects(
    @graphql.Args() args: AudioProjectFindManyArgs
  ): Promise<AudioProject[]> {
    return this.service.audioProjects(args);
  }

  @graphql.Query(() => AudioProject, { nullable: true })
  async audioProject(
    @graphql.Args() args: AudioProjectFindUniqueArgs
  ): Promise<AudioProject | null> {
    const result = await this.service.audioProject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AudioProject)
  async createAudioProject(
    @graphql.Args() args: CreateAudioProjectArgs
  ): Promise<AudioProject> {
    return await this.service.createAudioProject({
      ...args,
      data: {
        ...args.data,

        appUser: args.data.appUser
          ? {
              connect: args.data.appUser,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AudioProject)
  async updateAudioProject(
    @graphql.Args() args: UpdateAudioProjectArgs
  ): Promise<AudioProject | null> {
    try {
      return await this.service.updateAudioProject({
        ...args,
        data: {
          ...args.data,

          appUser: args.data.appUser
            ? {
                connect: args.data.appUser,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AudioProject)
  async deleteAudioProject(
    @graphql.Args() args: DeleteAudioProjectArgs
  ): Promise<AudioProject | null> {
    try {
      return await this.service.deleteAudioProject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUser",
  })
  async getAppUser(
    @graphql.Parent() parent: AudioProject
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
