/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AudioEffectService } from "../audioEffect.service";
import { AudioEffectCreateInput } from "./AudioEffectCreateInput";
import { AudioEffect } from "./AudioEffect";
import { AudioEffectFindManyArgs } from "./AudioEffectFindManyArgs";
import { AudioEffectWhereUniqueInput } from "./AudioEffectWhereUniqueInput";
import { AudioEffectUpdateInput } from "./AudioEffectUpdateInput";

export class AudioEffectControllerBase {
  constructor(protected readonly service: AudioEffectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AudioEffect })
  async createAudioEffect(
    @common.Body() data: AudioEffectCreateInput
  ): Promise<AudioEffect> {
    return await this.service.createAudioEffect({
      data: data,
      select: {
        createdAt: true,
        effectName: true,
        id: true,
        settings: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AudioEffect] })
  @ApiNestedQuery(AudioEffectFindManyArgs)
  async audioEffects(@common.Req() request: Request): Promise<AudioEffect[]> {
    const args = plainToClass(AudioEffectFindManyArgs, request.query);
    return this.service.audioEffects({
      ...args,
      select: {
        createdAt: true,
        effectName: true,
        id: true,
        settings: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AudioEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async audioEffect(
    @common.Param() params: AudioEffectWhereUniqueInput
  ): Promise<AudioEffect | null> {
    const result = await this.service.audioEffect({
      where: params,
      select: {
        createdAt: true,
        effectName: true,
        id: true,
        settings: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AudioEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAudioEffect(
    @common.Param() params: AudioEffectWhereUniqueInput,
    @common.Body() data: AudioEffectUpdateInput
  ): Promise<AudioEffect | null> {
    try {
      return await this.service.updateAudioEffect({
        where: params,
        data: data,
        select: {
          createdAt: true,
          effectName: true,
          id: true,
          settings: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AudioEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAudioEffect(
    @common.Param() params: AudioEffectWhereUniqueInput
  ): Promise<AudioEffect | null> {
    try {
      return await this.service.deleteAudioEffect({
        where: params,
        select: {
          createdAt: true,
          effectName: true,
          id: true,
          settings: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
