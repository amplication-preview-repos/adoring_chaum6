/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AudioEffect as PrismaAudioEffect } from "@prisma/client";

export class AudioEffectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AudioEffectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.audioEffect.count(args);
  }

  async audioEffects(
    args: Prisma.AudioEffectFindManyArgs
  ): Promise<PrismaAudioEffect[]> {
    return this.prisma.audioEffect.findMany(args);
  }
  async audioEffect(
    args: Prisma.AudioEffectFindUniqueArgs
  ): Promise<PrismaAudioEffect | null> {
    return this.prisma.audioEffect.findUnique(args);
  }
  async createAudioEffect(
    args: Prisma.AudioEffectCreateArgs
  ): Promise<PrismaAudioEffect> {
    return this.prisma.audioEffect.create(args);
  }
  async updateAudioEffect(
    args: Prisma.AudioEffectUpdateArgs
  ): Promise<PrismaAudioEffect> {
    return this.prisma.audioEffect.update(args);
  }
  async deleteAudioEffect(
    args: Prisma.AudioEffectDeleteArgs
  ): Promise<PrismaAudioEffect> {
    return this.prisma.audioEffect.delete(args);
  }
}
