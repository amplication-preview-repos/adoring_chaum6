/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AudioEffect } from "./AudioEffect";
import { AudioEffectCountArgs } from "./AudioEffectCountArgs";
import { AudioEffectFindManyArgs } from "./AudioEffectFindManyArgs";
import { AudioEffectFindUniqueArgs } from "./AudioEffectFindUniqueArgs";
import { CreateAudioEffectArgs } from "./CreateAudioEffectArgs";
import { UpdateAudioEffectArgs } from "./UpdateAudioEffectArgs";
import { DeleteAudioEffectArgs } from "./DeleteAudioEffectArgs";
import { AudioEffectService } from "../audioEffect.service";
@graphql.Resolver(() => AudioEffect)
export class AudioEffectResolverBase {
  constructor(protected readonly service: AudioEffectService) {}

  async _audioEffectsMeta(
    @graphql.Args() args: AudioEffectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AudioEffect])
  async audioEffects(
    @graphql.Args() args: AudioEffectFindManyArgs
  ): Promise<AudioEffect[]> {
    return this.service.audioEffects(args);
  }

  @graphql.Query(() => AudioEffect, { nullable: true })
  async audioEffect(
    @graphql.Args() args: AudioEffectFindUniqueArgs
  ): Promise<AudioEffect | null> {
    const result = await this.service.audioEffect(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AudioEffect)
  async createAudioEffect(
    @graphql.Args() args: CreateAudioEffectArgs
  ): Promise<AudioEffect> {
    return await this.service.createAudioEffect({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AudioEffect)
  async updateAudioEffect(
    @graphql.Args() args: UpdateAudioEffectArgs
  ): Promise<AudioEffect | null> {
    try {
      return await this.service.updateAudioEffect({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AudioEffect)
  async deleteAudioEffect(
    @graphql.Args() args: DeleteAudioEffectArgs
  ): Promise<AudioEffect | null> {
    try {
      return await this.service.deleteAudioEffect(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
