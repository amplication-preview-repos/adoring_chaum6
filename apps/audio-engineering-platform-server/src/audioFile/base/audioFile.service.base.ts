/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AudioFile as PrismaAudioFile,
  Composition as PrismaComposition,
} from "@prisma/client";

export class AudioFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AudioFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.audioFile.count(args);
  }

  async audioFiles(
    args: Prisma.AudioFileFindManyArgs
  ): Promise<PrismaAudioFile[]> {
    return this.prisma.audioFile.findMany(args);
  }
  async audioFile(
    args: Prisma.AudioFileFindUniqueArgs
  ): Promise<PrismaAudioFile | null> {
    return this.prisma.audioFile.findUnique(args);
  }
  async createAudioFile(
    args: Prisma.AudioFileCreateArgs
  ): Promise<PrismaAudioFile> {
    return this.prisma.audioFile.create(args);
  }
  async updateAudioFile(
    args: Prisma.AudioFileUpdateArgs
  ): Promise<PrismaAudioFile> {
    return this.prisma.audioFile.update(args);
  }
  async deleteAudioFile(
    args: Prisma.AudioFileDeleteArgs
  ): Promise<PrismaAudioFile> {
    return this.prisma.audioFile.delete(args);
  }

  async getComposition(parentId: string): Promise<PrismaComposition | null> {
    return this.prisma.audioFile
      .findUnique({
        where: { id: parentId },
      })
      .composition();
  }
}
